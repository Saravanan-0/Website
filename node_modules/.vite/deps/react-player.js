import {
  require_prop_types
} from "./chunk-MH6OOWFU.js";
import {
  require_react
} from "./chunk-ZGRSIX2Q.js";
import {
  __commonJS,
  __esm,
  __export,
  __toCommonJS
} from "./chunk-ROME4SDB.js";

// node_modules/react-player/lib/props.js
var require_props = __commonJS({
  "node_modules/react-player/lib/props.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DEPRECATED_CONFIG_PROPS = exports.defaultProps = exports.propTypes = void 0;
    var _propTypes = require_prop_types();
    var _propTypes2 = _interopRequireDefault(_propTypes);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var string = _propTypes2["default"].string;
    var bool = _propTypes2["default"].bool;
    var number = _propTypes2["default"].number;
    var array = _propTypes2["default"].array;
    var oneOfType = _propTypes2["default"].oneOfType;
    var shape = _propTypes2["default"].shape;
    var object = _propTypes2["default"].object;
    var func = _propTypes2["default"].func;
    var propTypes = exports.propTypes = {
      url: oneOfType([string, array]),
      playing: bool,
      loop: bool,
      controls: bool,
      volume: number,
      muted: bool,
      playbackRate: number,
      width: oneOfType([string, number]),
      height: oneOfType([string, number]),
      style: object,
      progressInterval: number,
      playsinline: bool,
      wrapper: oneOfType([string, func]),
      config: shape({
        soundcloud: shape({
          options: object
        }),
        youtube: shape({
          playerVars: object,
          preload: bool
        }),
        facebook: shape({
          appId: string
        }),
        dailymotion: shape({
          params: object,
          preload: bool
        }),
        vimeo: shape({
          iframeParams: object,
          preload: bool
        }),
        file: shape({
          attributes: object,
          tracks: array,
          forceAudio: bool,
          forceHLS: bool,
          forceDASH: bool,
          hlsOptions: object
        }),
        wistia: shape({
          options: object
        }),
        mixcloud: shape({
          options: object
        }),
        twitch: shape({
          options: object
        })
      }),
      onReady: func,
      onStart: func,
      onPlay: func,
      onPause: func,
      onBuffer: func,
      onEnded: func,
      onError: func,
      onDuration: func,
      onSeek: func,
      onProgress: func
    };
    var defaultProps = exports.defaultProps = {
      playing: false,
      loop: false,
      controls: false,
      volume: null,
      muted: false,
      playbackRate: 1,
      width: "640px",
      height: "360px",
      style: {},
      progressInterval: 1e3,
      playsinline: false,
      wrapper: "div",
      config: {
        soundcloud: {
          options: {
            visual: true,
            // Undocumented, but makes player fill container and look better
            buying: false,
            liking: false,
            download: false,
            sharing: false,
            show_comments: false,
            show_playcount: false
          }
        },
        youtube: {
          playerVars: {
            autoplay: 0,
            playsinline: 1,
            showinfo: 0,
            rel: 0,
            iv_load_policy: 3,
            modestbranding: 1
          },
          preload: false
        },
        facebook: {
          appId: "1309697205772819"
        },
        dailymotion: {
          params: {
            api: 1,
            "endscreen-enable": false
          },
          preload: false
        },
        vimeo: {
          playerOptions: {
            autopause: false,
            autoplay: false,
            byline: false,
            portrait: false,
            title: false
          },
          preload: false
        },
        file: {
          attributes: {},
          tracks: [],
          forceAudio: false,
          forceHLS: false,
          forceDASH: false,
          hlsOptions: {}
        },
        wistia: {
          options: {}
        },
        mixcloud: {
          options: {
            hide_cover: 1
          }
        },
        twitch: {
          options: {}
        }
      },
      onReady: function onReady() {
      },
      onStart: function onStart() {
      },
      onPlay: function onPlay() {
      },
      onPause: function onPause() {
      },
      onBuffer: function onBuffer() {
      },
      onEnded: function onEnded() {
      },
      onError: function onError() {
      },
      onDuration: function onDuration() {
      },
      onSeek: function onSeek() {
      },
      onProgress: function onProgress() {
      }
    };
    var DEPRECATED_CONFIG_PROPS = exports.DEPRECATED_CONFIG_PROPS = ["soundcloudConfig", "youtubeConfig", "facebookConfig", "dailymotionConfig", "vimeoConfig", "fileConfig", "wistiaConfig"];
  }
});

// node_modules/load-script/index.js
var require_load_script = __commonJS({
  "node_modules/load-script/index.js"(exports, module) {
    module.exports = function load(src, opts, cb) {
      var head = document.head || document.getElementsByTagName("head")[0];
      var script = document.createElement("script");
      if (typeof opts === "function") {
        cb = opts;
        opts = {};
      }
      opts = opts || {};
      cb = cb || function() {
      };
      script.type = opts.type || "text/javascript";
      script.charset = opts.charset || "utf8";
      script.async = "async" in opts ? !!opts.async : true;
      script.src = src;
      if (opts.attrs) {
        setAttributes(script, opts.attrs);
      }
      if (opts.text) {
        script.text = "" + opts.text;
      }
      var onend = "onload" in script ? stdOnEnd : ieOnEnd;
      onend(script, cb);
      if (!script.onload) {
        stdOnEnd(script, cb);
      }
      head.appendChild(script);
    };
    function setAttributes(script, attrs) {
      for (var attr in attrs) {
        script.setAttribute(attr, attrs[attr]);
      }
    }
    function stdOnEnd(script, cb) {
      script.onload = function() {
        this.onerror = this.onload = null;
        cb(null, script);
      };
      script.onerror = function() {
        this.onerror = this.onload = null;
        cb(new Error("Failed to load " + this.src), script);
      };
    }
    function ieOnEnd(script, cb) {
      script.onreadystatechange = function() {
        if (this.readyState != "complete" && this.readyState != "loaded")
          return;
        this.onreadystatechange = null;
        cb(null, script);
      };
    }
  }
});

// node_modules/react-player/node_modules/deepmerge/dist/es.js
var es_exports = {};
__export(es_exports, {
  default: () => es_default
});
function isNonNullObject(value) {
  return !!value && typeof value === "object";
}
function isSpecial(value) {
  var stringValue = Object.prototype.toString.call(value);
  return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
}
function isReactElement(value) {
  return value.$$typeof === REACT_ELEMENT_TYPE;
}
function emptyTarget(val) {
  return Array.isArray(val) ? [] : {};
}
function cloneUnlessOtherwiseSpecified(value, options) {
  return options.clone !== false && options.isMergeableObject(value) ? deepmerge(emptyTarget(value), value, options) : value;
}
function defaultArrayMerge(target, source, options) {
  return target.concat(source).map(function(element) {
    return cloneUnlessOtherwiseSpecified(element, options);
  });
}
function mergeObject(target, source, options) {
  var destination = {};
  if (options.isMergeableObject(target)) {
    Object.keys(target).forEach(function(key) {
      destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
    });
  }
  Object.keys(source).forEach(function(key) {
    if (!options.isMergeableObject(source[key]) || !target[key]) {
      destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
    } else {
      destination[key] = deepmerge(target[key], source[key], options);
    }
  });
  return destination;
}
function deepmerge(target, source, options) {
  options = options || {};
  options.arrayMerge = options.arrayMerge || defaultArrayMerge;
  options.isMergeableObject = options.isMergeableObject || isMergeableObject;
  var sourceIsArray = Array.isArray(source);
  var targetIsArray = Array.isArray(target);
  var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
  if (!sourceAndTargetTypesMatch) {
    return cloneUnlessOtherwiseSpecified(source, options);
  } else if (sourceIsArray) {
    return options.arrayMerge(target, source, options);
  } else {
    return mergeObject(target, source, options);
  }
}
var isMergeableObject, canUseSymbol, REACT_ELEMENT_TYPE, deepmerge_1, es_default;
var init_es = __esm({
  "node_modules/react-player/node_modules/deepmerge/dist/es.js"() {
    isMergeableObject = function isMergeableObject2(value) {
      return isNonNullObject(value) && !isSpecial(value);
    };
    canUseSymbol = typeof Symbol === "function" && Symbol.for;
    REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
    deepmerge.all = function deepmergeAll(array, options) {
      if (!Array.isArray(array)) {
        throw new Error("first argument should be an array");
      }
      return array.reduce(function(prev, next) {
        return deepmerge(prev, next, options);
      }, {});
    };
    deepmerge_1 = deepmerge;
    es_default = deepmerge_1;
  }
});

// node_modules/react-player/lib/utils.js
var require_utils = __commonJS({
  "node_modules/react-player/lib/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
      return typeof obj;
    } : function(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
    var _slicedToArray = function() {
      function sliceIterator(arr, i) {
        var _arr = [];
        var _n = true;
        var _d = false;
        var _e = void 0;
        try {
          for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
            _arr.push(_s.value);
            if (i && _arr.length === i)
              break;
          }
        } catch (err) {
          _d = true;
          _e = err;
        } finally {
          try {
            if (!_n && _i["return"])
              _i["return"]();
          } finally {
            if (_d)
              throw _e;
          }
        }
        return _arr;
      }
      return function(arr, i) {
        if (Array.isArray(arr)) {
          return arr;
        } else if (Symbol.iterator in Object(arr)) {
          return sliceIterator(arr, i);
        } else {
          throw new TypeError("Invalid attempt to destructure non-iterable instance");
        }
      };
    }();
    exports.parseStartTime = parseStartTime;
    exports.randomString = randomString;
    exports.queryString = queryString;
    exports.getSDK = getSDK;
    exports.getConfig = getConfig;
    exports.omit = omit;
    exports.callPlayer = callPlayer;
    exports.isObject = isObject;
    exports.isEqual = isEqual;
    var _loadScript = require_load_script();
    var _loadScript2 = _interopRequireDefault(_loadScript);
    var _deepmerge = (init_es(), __toCommonJS(es_exports));
    var _deepmerge2 = _interopRequireDefault(_deepmerge);
    var _props = require_props();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _defineProperty(obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    var MATCH_START_QUERY = /[?&#](?:start|t)=([0-9hms]+)/;
    var MATCH_START_STAMP = /(\d+)(h|m|s)/g;
    var MATCH_NUMERIC = /^\d+$/;
    function parseStartTime(url) {
      var match = url.match(MATCH_START_QUERY);
      if (match) {
        var stamp = match[1];
        if (stamp.match(MATCH_START_STAMP)) {
          return parseStartStamp(stamp);
        }
        if (MATCH_NUMERIC.test(stamp)) {
          return parseInt(stamp, 10);
        }
      }
      return 0;
    }
    function parseStartStamp(stamp) {
      var seconds = 0;
      var array = MATCH_START_STAMP.exec(stamp);
      while (array !== null) {
        var _array = array, _array2 = _slicedToArray(_array, 3), count = _array2[1], period = _array2[2];
        if (period === "h")
          seconds += parseInt(count, 10) * 60 * 60;
        if (period === "m")
          seconds += parseInt(count, 10) * 60;
        if (period === "s")
          seconds += parseInt(count, 10);
        array = MATCH_START_STAMP.exec(stamp);
      }
      return seconds;
    }
    function randomString() {
      return Math.random().toString(36).substr(2, 5);
    }
    function queryString(object) {
      return Object.keys(object).map(function(key) {
        return key + "=" + object[key];
      }).join("&");
    }
    function getSDK(url, sdkGlobal) {
      var sdkReady = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
      var isLoaded = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : function() {
        return true;
      };
      if (window[sdkGlobal] && isLoaded(window[sdkGlobal])) {
        return Promise.resolve(window[sdkGlobal]);
      }
      return new Promise(function(resolve, reject) {
        if (sdkReady) {
          var previousOnReady = window[sdkReady];
          window[sdkReady] = function() {
            if (previousOnReady)
              previousOnReady();
            resolve(window[sdkGlobal]);
          };
        }
        (0, _loadScript2["default"])(url, function(err) {
          if (err)
            reject(err);
          if (!sdkReady) {
            resolve(window[sdkGlobal]);
          }
        });
      });
    }
    function getConfig(props, defaultProps, showWarning) {
      var config = (0, _deepmerge2["default"])(defaultProps.config, props.config);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = void 0;
      try {
        for (var _iterator = _props.DEPRECATED_CONFIG_PROPS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var p = _step.value;
          if (props[p]) {
            var key = p.replace(/Config$/, "");
            config = (0, _deepmerge2["default"])(config, _defineProperty({}, key, props[p]));
            if (showWarning) {
              var link = "https://github.com/CookPete/react-player#config-prop";
              var message = "ReactPlayer: %c" + p + " %cis deprecated, please use the config prop instead – " + link;
              console.warn(message, "font-weight: bold", "");
            }
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"]) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      return config;
    }
    function omit(object) {
      var _ref;
      for (var _len = arguments.length, arrays = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        arrays[_key - 1] = arguments[_key];
      }
      var omitKeys = (_ref = []).concat.apply(_ref, arrays);
      var output = {};
      var keys = Object.keys(object);
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = void 0;
      try {
        for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var key = _step2.value;
          if (omitKeys.indexOf(key) === -1) {
            output[key] = object[key];
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
      return output;
    }
    function callPlayer(method) {
      var _player;
      if (!this.player || !this.player[method]) {
        var message = "ReactPlayer: " + this.constructor.displayName + " player could not call %c" + method + "%c – ";
        if (!this.player) {
          message += "The player was not available";
        } else if (!this.player[method]) {
          message += "The method was not available";
        }
        console.warn(message, "font-weight: bold", "");
        return null;
      }
      for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      return (_player = this.player)[method].apply(_player, args);
    }
    function isObject(val) {
      return val !== null && (typeof val === "undefined" ? "undefined" : _typeof(val)) === "object";
    }
    function isEqual(a, b) {
      if (typeof a === "function" && typeof b === "function") {
        return true;
      }
      if (a instanceof Array && b instanceof Array) {
        if (a.length !== b.length) {
          return false;
        }
        for (var i = 0; i !== a.length; i++) {
          if (!isEqual(a[i], b[i])) {
            return false;
          }
        }
        return true;
      }
      if (isObject(a) && isObject(b)) {
        if (Object.keys(a).length !== Object.keys(b).length) {
          return false;
        }
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = void 0;
        try {
          for (var _iterator3 = Object.keys(a)[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            var key = _step3.value;
            if (!isEqual(a[key], b[key])) {
              return false;
            }
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3["return"]) {
              _iterator3["return"]();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
        return true;
      }
      return a === b;
    }
  }
});

// node_modules/react-player/lib/Player.js
var require_Player = __commonJS({
  "node_modules/react-player/lib/Player.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _props2 = require_props();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SEEK_ON_PLAY_EXPIRY = 5e3;
    var Player = function(_Component) {
      _inherits(Player2, _Component);
      function Player2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Player2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Player2.__proto__ || Object.getPrototypeOf(Player2)).call.apply(_ref, [this].concat(args))), _this), _this.mounted = false, _this.isReady = false, _this.isPlaying = false, _this.isLoading = true, _this.startOnPlay = true, _this.seekOnPlay = null, _this.onDurationCalled = false, _this.getInternalPlayer = function(key) {
          if (!_this.player)
            return null;
          return _this.player[key];
        }, _this.progress = function() {
          if (_this.props.url && _this.player && _this.isReady) {
            var playedSeconds = _this.getCurrentTime() || 0;
            var loadedSeconds = _this.getSecondsLoaded();
            var duration = _this.getDuration();
            if (duration) {
              var progress = {
                playedSeconds,
                played: playedSeconds / duration
              };
              if (loadedSeconds !== null) {
                progress.loadedSeconds = loadedSeconds;
                progress.loaded = loadedSeconds / duration;
              }
              if (progress.played !== _this.prevPlayed || progress.loaded !== _this.prevLoaded) {
                _this.props.onProgress(progress);
              }
              _this.prevPlayed = progress.played;
              _this.prevLoaded = progress.loaded;
            }
          }
          _this.progressTimeout = setTimeout(_this.progress, _this.props.progressFrequency || _this.props.progressInterval);
        }, _this.onReady = function() {
          if (!_this.mounted)
            return;
          _this.isReady = true;
          _this.isLoading = false;
          var _this$props = _this.props, onReady = _this$props.onReady, playing = _this$props.playing, volume = _this$props.volume, muted = _this$props.muted;
          onReady();
          if (muted || volume !== null) {
            _this.player.setVolume(muted ? 0 : volume);
          }
          if (playing) {
            _this.player.play();
          }
          _this.onDurationCheck();
        }, _this.onPlay = function() {
          _this.isPlaying = true;
          _this.isLoading = false;
          var _this$props2 = _this.props, onStart = _this$props2.onStart, onPlay = _this$props2.onPlay, playbackRate = _this$props2.playbackRate;
          if (_this.startOnPlay) {
            if (_this.player.setPlaybackRate) {
              _this.player.setPlaybackRate(playbackRate);
            }
            onStart();
            _this.startOnPlay = false;
          }
          onPlay();
          if (_this.seekOnPlay) {
            _this.seekTo(_this.seekOnPlay);
            _this.seekOnPlay = null;
          }
          _this.onDurationCheck();
        }, _this.onPause = function(e) {
          _this.isPlaying = false;
          if (!_this.isLoading) {
            _this.props.onPause(e);
          }
        }, _this.onEnded = function() {
          var _this$props3 = _this.props, activePlayer = _this$props3.activePlayer, loop = _this$props3.loop, onEnded = _this$props3.onEnded;
          if (activePlayer.loopOnEnded && loop) {
            _this.seekTo(0);
          }
          if (!loop) {
            _this.isPlaying = false;
          }
          onEnded();
        }, _this.onDurationCheck = function() {
          clearTimeout(_this.durationCheckTimeout);
          var duration = _this.getDuration();
          if (duration) {
            if (!_this.onDurationCalled) {
              _this.props.onDuration(duration);
              _this.onDurationCalled = true;
            }
          } else {
            _this.durationCheckTimeout = setTimeout(_this.onDurationCheck, 100);
          }
        }, _this.ref = function(player) {
          if (player) {
            _this.player = player;
          }
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Player2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.mounted = true;
          this.player.load(this.props.url);
          this.progress();
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          clearTimeout(this.progressTimeout);
          if (this.isReady) {
            this.player.stop();
          }
          this.mounted = false;
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          var _props = this.props, url = _props.url, playing = _props.playing, volume = _props.volume, muted = _props.muted, playbackRate = _props.playbackRate;
          if (url !== nextProps.url) {
            this.isLoading = true;
            this.startOnPlay = true;
            this.onDurationCalled = false;
            this.player.load(nextProps.url, this.isReady);
          }
          if (!playing && nextProps.playing && !this.isPlaying) {
            this.player.play();
          }
          if (playing && !nextProps.playing && this.isPlaying) {
            this.player.pause();
          }
          if (nextProps.volume !== null) {
            if (volume !== nextProps.volume && !nextProps.muted) {
              this.player.setVolume(nextProps.volume);
            }
            if (muted !== nextProps.muted) {
              this.player.setVolume(nextProps.muted ? 0 : nextProps.volume);
            }
          }
          if (playbackRate !== nextProps.playbackRate && this.player.setPlaybackRate) {
            this.player.setPlaybackRate(nextProps.playbackRate);
          }
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          if (!this.isReady)
            return null;
          return this.player.getDuration();
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          if (!this.isReady)
            return null;
          return this.player.getCurrentTime();
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (!this.isReady)
            return null;
          return this.player.getSecondsLoaded();
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          var _this2 = this;
          if (!this.isReady && amount !== 0) {
            this.seekOnPlay = amount;
            setTimeout(function() {
              _this2.seekOnPlay = null;
            }, SEEK_ON_PLAY_EXPIRY);
            return;
          }
          if (amount > 0 && amount < 1) {
            var duration = this.player.getDuration();
            if (!duration) {
              console.warn("ReactPlayer: could not seek using fraction – duration not yet available");
              return;
            }
            this.player.seekTo(duration * amount);
            return;
          }
          this.player.seekTo(amount);
        }
      }, {
        key: "render",
        value: function render() {
          var Player3 = this.props.activePlayer;
          return _react2["default"].createElement(Player3, _extends({}, this.props, {
            ref: this.ref,
            onReady: this.onReady,
            onPlay: this.onPlay,
            onPause: this.onPause,
            onEnded: this.onEnded
          }));
        }
      }]);
      return Player2;
    }(_react.Component);
    Player.displayName = "Player";
    Player.propTypes = _props2.propTypes;
    Player.defaultProps = _props2.defaultProps;
    exports["default"] = Player;
  }
});

// node_modules/react-player/lib/singlePlayer.js
var require_singlePlayer = __commonJS({
  "node_modules/react-player/lib/singlePlayer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    exports["default"] = createSinglePlayer;
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _props2 = require_props();
    var _utils = require_utils();
    var _Player = require_Player();
    var _Player2 = _interopRequireDefault(_Player);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SUPPORTED_PROPS = Object.keys(_props2.propTypes);
    function createSinglePlayer(activePlayer) {
      var _class, _temp2;
      return _temp2 = _class = function(_Component) {
        _inherits(SinglePlayer, _Component);
        function SinglePlayer() {
          var _ref;
          var _temp, _this, _ret;
          _classCallCheck(this, SinglePlayer);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SinglePlayer.__proto__ || Object.getPrototypeOf(SinglePlayer)).call.apply(_ref, [this].concat(args))), _this), _this.ref = function(player) {
            _this.player = player;
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }
        _createClass(SinglePlayer, [{
          key: "shouldComponentUpdate",
          value: function shouldComponentUpdate(nextProps) {
            return !(0, _utils.isEqual)(this.props, nextProps);
          }
        }, {
          key: "componentWillUpdate",
          value: function componentWillUpdate(nextProps) {
            this.config = (0, _utils.getConfig)(nextProps, _props2.defaultProps);
          }
        }, {
          key: "render",
          value: function render() {
            if (!activePlayer.canPlay(this.props.url)) {
              return null;
            }
            var _props = this.props, style = _props.style, width = _props.width, height = _props.height, Wrapper = _props.wrapper;
            var otherProps = (0, _utils.omit)(this.props, SUPPORTED_PROPS, _props2.DEPRECATED_CONFIG_PROPS);
            return _react2["default"].createElement(
              Wrapper,
              _extends({ style: _extends({}, style, { width, height }) }, otherProps),
              _react2["default"].createElement(_Player2["default"], _extends({}, this.props, {
                ref: this.ref,
                activePlayer,
                config: (0, _utils.getConfig)(this.props, _props2.defaultProps)
              }))
            );
          }
        }]);
        return SinglePlayer;
      }(_react.Component), _class.displayName = activePlayer.displayName + "Player", _class.propTypes = _props2.propTypes, _class.defaultProps = _props2.defaultProps, _class.canPlay = activePlayer.canPlay, _temp2;
    }
  }
});

// node_modules/react-player/lib/players/YouTube.js
var require_YouTube = __commonJS({
  "node_modules/react-player/lib/players/YouTube.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.YouTube = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "https://www.youtube.com/iframe_api";
    var SDK_GLOBAL = "YT";
    var SDK_GLOBAL_READY = "onYouTubeIframeAPIReady";
    var MATCH_URL = /(?:youtu\.be\/|youtube\.com\/(?:embed\/|v\/|watch\?v=|watch\?.+&v=))((\w|-){11})/;
    var YouTube = exports.YouTube = function(_Component) {
      _inherits(YouTube2, _Component);
      function YouTube2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, YouTube2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = YouTube2.__proto__ || Object.getPrototypeOf(YouTube2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.onStateChange = function(_ref2) {
          var data = _ref2.data;
          var _this$props = _this.props, onPlay = _this$props.onPlay, onPause = _this$props.onPause, onBuffer = _this$props.onBuffer, onEnded = _this$props.onEnded, onReady = _this$props.onReady;
          var _window$SDK_GLOBAL$Pl = window[SDK_GLOBAL].PlayerState, PLAYING = _window$SDK_GLOBAL$Pl.PLAYING, PAUSED = _window$SDK_GLOBAL$Pl.PAUSED, BUFFERING = _window$SDK_GLOBAL$Pl.BUFFERING, ENDED = _window$SDK_GLOBAL$Pl.ENDED, CUED = _window$SDK_GLOBAL$Pl.CUED;
          if (data === PLAYING)
            onPlay();
          if (data === PAUSED)
            onPause();
          if (data === BUFFERING)
            onBuffer();
          if (data === ENDED)
            onEnded();
          if (data === CUED)
            onReady();
        }, _this.ref = function(container) {
          _this.container = container;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(YouTube2, [{
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _props = this.props, playsinline = _props.playsinline, controls = _props.controls, config = _props.config, _onError = _props.onError;
          var id = url && url.match(MATCH_URL)[1];
          if (isReady) {
            this.player.cueVideoById({
              videoId: id,
              startSeconds: (0, _utils.parseStartTime)(url)
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(YT) {
            return YT.loaded;
          }).then(function(YT) {
            if (!_this2.container)
              return;
            _this2.player = new YT.Player(_this2.container, {
              width: "100%",
              height: "100%",
              videoId: id,
              playerVars: _extends({
                controls: controls ? 1 : 0,
                start: (0, _utils.parseStartTime)(url),
                origin: window.location.origin,
                playsinline
              }, config.youtube.playerVars),
              events: {
                onReady: _this2.props.onReady,
                onStateChange: _this2.onStateChange,
                onError: function onError(event) {
                  return _onError(event.data);
                }
              }
            });
          }, _onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("playVideo");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pauseVideo");
        }
      }, {
        key: "stop",
        value: function stop() {
          if (!document.body.contains(this.callPlayer("getIframe")))
            return;
          this.callPlayer("stopVideo");
        }
      }, {
        key: "seekTo",
        value: function seekTo(amount) {
          this.callPlayer("seekTo", amount);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("setPlaybackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.callPlayer("getVideoLoadedFraction") * this.getDuration();
        }
      }, {
        key: "render",
        value: function render() {
          var style = _extends({
            width: "100%",
            height: "100%"
          }, this.props.style);
          return _react2["default"].createElement(
            "div",
            { style },
            _react2["default"].createElement("div", { ref: this.ref })
          );
        }
      }]);
      return YouTube2;
    }(_react.Component);
    YouTube.displayName = "YouTube";
    YouTube.canPlay = function(url) {
      return MATCH_URL.test(url);
    };
    YouTube.loopOnEnded = true;
    exports["default"] = (0, _singlePlayer2["default"])(YouTube);
  }
});

// node_modules/react-player/lib/players/SoundCloud.js
var require_SoundCloud = __commonJS({
  "node_modules/react-player/lib/players/SoundCloud.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.SoundCloud = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "https://w.soundcloud.com/player/api.js";
    var SDK_GLOBAL = "SC";
    var MATCH_URL = /(soundcloud\.com|snd\.sc)\/.+$/;
    var SoundCloud = exports.SoundCloud = function(_Component) {
      _inherits(SoundCloud2, _Component);
      function SoundCloud2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, SoundCloud2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = SoundCloud2.__proto__ || Object.getPrototypeOf(SoundCloud2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.duration = null, _this.currentTime = null, _this.fractionLoaded = null, _this.ref = function(iframe) {
          _this.iframe = iframe;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(SoundCloud2, [{
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(SC) {
            if (!_this2.iframe)
              return;
            var _SC$Widget$Events = SC.Widget.Events, PLAY = _SC$Widget$Events.PLAY, PLAY_PROGRESS = _SC$Widget$Events.PLAY_PROGRESS, PAUSE = _SC$Widget$Events.PAUSE, FINISH = _SC$Widget$Events.FINISH, ERROR = _SC$Widget$Events.ERROR;
            if (!isReady) {
              _this2.player = SC.Widget(_this2.iframe);
              _this2.player.bind(PLAY, _this2.props.onPlay);
              _this2.player.bind(PAUSE, _this2.props.onPause);
              _this2.player.bind(PLAY_PROGRESS, function(e) {
                _this2.currentTime = e.currentPosition / 1e3;
                _this2.fractionLoaded = e.loadedProgress;
              });
              _this2.player.bind(FINISH, function() {
                return _this2.props.onEnded();
              });
              _this2.player.bind(ERROR, function(e) {
                return _this2.props.onError(e);
              });
            }
            _this2.player.load(url, _extends({}, _this2.props.config.soundcloud.options, {
              callback: function callback() {
                _this2.player.getDuration(function(duration) {
                  _this2.duration = duration / 1e3;
                  _this2.props.onReady();
                });
              }
            }));
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seekTo", seconds * 1e3);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.fractionLoaded * this.duration;
        }
      }, {
        key: "render",
        value: function render() {
          var style = _extends({
            width: "100%",
            height: "100%"
          }, this.props.style);
          return _react2["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://w.soundcloud.com/player/?url=" + encodeURIComponent(this.props.url),
            style,
            frameBorder: 0
          });
        }
      }]);
      return SoundCloud2;
    }(_react.Component);
    SoundCloud.displayName = "SoundCloud";
    SoundCloud.canPlay = function(url) {
      return MATCH_URL.test(url);
    };
    SoundCloud.loopOnEnded = true;
    exports["default"] = (0, _singlePlayer2["default"])(SoundCloud);
  }
});

// node_modules/react-player/lib/players/Vimeo.js
var require_Vimeo = __commonJS({
  "node_modules/react-player/lib/players/Vimeo.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Vimeo = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "https://player.vimeo.com/api/player.js";
    var SDK_GLOBAL = "Vimeo";
    var MATCH_URL = /vimeo\.com\/.+/;
    var MATCH_FILE_URL = /vimeo\.com\/external\/.+\.mp4/;
    var Vimeo = exports.Vimeo = function(_Component) {
      _inherits(Vimeo2, _Component);
      function Vimeo2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Vimeo2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Vimeo2.__proto__ || Object.getPrototypeOf(Vimeo2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.duration = null, _this.currentTime = null, _this.secondsLoaded = null, _this.ref = function(container) {
          _this.container = container;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Vimeo2, [{
        key: "load",
        value: function load(url) {
          var _this2 = this;
          this.duration = null;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Vimeo3) {
            if (!_this2.container)
              return;
            _this2.player = new Vimeo3.Player(_this2.container, _extends({}, _this2.props.config.vimeo.playerOptions, {
              url,
              loop: _this2.props.loop
            }));
            _this2.player.ready().then(function() {
              var iframe = _this2.container.querySelector("iframe");
              iframe.style.width = "100%";
              iframe.style.height = "100%";
            })["catch"](_this2.props.onError);
            _this2.player.on("loaded", function() {
              _this2.props.onReady();
              _this2.player.getDuration().then(function(duration) {
                _this2.duration = duration;
              });
            });
            _this2.player.on("play", _this2.props.onPlay);
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", function(e) {
              return _this2.props.onSeek(e.seconds);
            });
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref2) {
              var seconds = _ref2.seconds;
              _this2.currentTime = seconds;
            });
            _this2.player.on("progress", function(_ref3) {
              var seconds = _ref3.seconds;
              _this2.secondsLoaded = seconds;
            });
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("unload");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var style = _extends({
            width: "100%",
            height: "100%",
            overflow: "hidden",
            backgroundColor: "black"
          }, this.props.style);
          return _react2["default"].createElement("div", {
            key: this.props.url,
            ref: this.ref,
            style
          });
        }
      }]);
      return Vimeo2;
    }(_react.Component);
    Vimeo.displayName = "Vimeo";
    Vimeo.canPlay = function(url) {
      if (MATCH_FILE_URL.test(url)) {
        return false;
      }
      return MATCH_URL.test(url);
    };
    exports["default"] = (0, _singlePlayer2["default"])(Vimeo);
  }
});

// node_modules/react-player/lib/players/Facebook.js
var require_Facebook = __commonJS({
  "node_modules/react-player/lib/players/Facebook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Facebook = void 0;
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "//connect.facebook.net/en_US/sdk.js";
    var SDK_GLOBAL = "FB";
    var SDK_GLOBAL_READY = "fbAsyncInit";
    var MATCH_URL = /facebook\.com\/([^/?].+\/)?video(s|\.php)[/?].*$/;
    var PLAYER_ID_PREFIX = "facebook-player-";
    var Facebook = exports.Facebook = function(_Component) {
      _inherits(Facebook2, _Component);
      function Facebook2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Facebook2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Facebook2.__proto__ || Object.getPrototypeOf(Facebook2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.playerID = PLAYER_ID_PREFIX + (0, _utils.randomString)(), _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Facebook2, [{
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          if (isReady) {
            (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
              return FB.XFBML.parse();
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY).then(function(FB) {
            FB.init({
              appId: _this2.props.config.facebook.appId,
              xfbml: true,
              version: "v2.5"
            });
            FB.Event.subscribe("xfbml.ready", function(msg) {
              if (msg.type === "video" && msg.id === _this2.playerID) {
                _this2.player = msg.instance;
                _this2.player.subscribe("startedPlaying", _this2.props.onPlay);
                _this2.player.subscribe("paused", _this2.props.onPause);
                _this2.player.subscribe("finishedPlaying", _this2.props.onEnded);
                _this2.player.subscribe("startedBuffering", _this2.props.onBuffer);
                _this2.player.subscribe("error", _this2.props.onError);
                _this2.callPlayer("unmute");
                _this2.props.onReady();
              }
            });
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          if (fraction !== 0) {
            this.callPlayer("unmute");
          }
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentPosition");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%",
            backgroundColor: "black"
          };
          return _react2["default"].createElement("div", {
            style,
            id: this.playerID,
            className: "fb-video",
            "data-href": this.props.url,
            "data-allowfullscreen": "true",
            "data-controls": !this.props.controls ? "false" : void 0
          });
        }
      }]);
      return Facebook2;
    }(_react.Component);
    Facebook.displayName = "Facebook";
    Facebook.canPlay = function(url) {
      return MATCH_URL.test(url);
    };
    Facebook.loopOnEnded = true;
    exports["default"] = (0, _singlePlayer2["default"])(Facebook);
  }
});

// node_modules/react-player/lib/players/Streamable.js
var require_Streamable = __commonJS({
  "node_modules/react-player/lib/players/Streamable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Streamable = void 0;
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "//cdn.embed.ly/player-0.1.0.min.js";
    var SDK_GLOBAL = "playerjs";
    var MATCH_URL = /streamable\.com\/([a-z0-9]+)$/;
    var Streamable = exports.Streamable = function(_Component) {
      _inherits(Streamable2, _Component);
      function Streamable2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Streamable2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Streamable2.__proto__ || Object.getPrototypeOf(Streamable2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.duration = null, _this.currentTime = null, _this.secondsLoaded = null, _this.ref = function(iframe) {
          _this.iframe = iframe;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Streamable2, [{
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(playerjs) {
            if (!_this2.iframe)
              return;
            _this2.player = new playerjs.Player(_this2.iframe);
            _this2.player.setLoop(_this2.props.loop);
            _this2.player.on("ready", _this2.props.onReady);
            _this2.player.on("play", _this2.props.onPlay);
            _this2.player.on("pause", _this2.props.onPause);
            _this2.player.on("seeked", _this2.props.onSeek);
            _this2.player.on("ended", _this2.props.onEnded);
            _this2.player.on("error", _this2.props.onError);
            _this2.player.on("timeupdate", function(_ref2) {
              var duration = _ref2.duration, seconds = _ref2.seconds;
              _this2.duration = duration;
              _this2.currentTime = seconds;
            });
            _this2.player.on("buffered", function(_ref3) {
              var percent = _ref3.percent;
              if (_this2.duration) {
                _this2.secondsLoaded = _this2.duration * percent;
              }
            });
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("setCurrentTime", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction * 100);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.secondsLoaded;
        }
      }, {
        key: "render",
        value: function render() {
          var id = this.props.url.match(MATCH_URL)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react2["default"].createElement("iframe", {
            ref: this.ref,
            src: "https://streamable.com/o/" + id,
            frameBorder: "0",
            scrolling: "no",
            style,
            allowFullScreen: true
          });
        }
      }]);
      return Streamable2;
    }(_react.Component);
    Streamable.displayName = "Streamable";
    Streamable.canPlay = function(url) {
      return MATCH_URL.test(url);
    };
    exports["default"] = (0, _singlePlayer2["default"])(Streamable);
  }
});

// node_modules/react-player/lib/players/Wistia.js
var require_Wistia = __commonJS({
  "node_modules/react-player/lib/players/Wistia.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Wistia = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "//fast.wistia.com/assets/external/E-v1.js";
    var SDK_GLOBAL = "Wistia";
    var MATCH_URL = /(?:wistia\.com|wi\.st)\/(?:medias|embed)\/(.*)$/;
    var Wistia = exports.Wistia = function(_Component) {
      _inherits(Wistia2, _Component);
      function Wistia2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Wistia2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Wistia2.__proto__ || Object.getPrototypeOf(Wistia2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Wistia2, [{
        key: "getID",
        value: function getID(url) {
          return url && url.match(MATCH_URL)[1];
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _props = this.props, controls = _props.controls, _onReady = _props.onReady, onPlay = _props.onPlay, onPause = _props.onPause, onSeek = _props.onSeek, onEnded = _props.onEnded, config = _props.config;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function() {
            window._wq = window._wq || [];
            window._wq.push({
              id: _this2.getID(url),
              options: _extends({
                controlsVisibleOnLoad: controls
              }, config.wistia.options),
              onReady: function onReady(player) {
                _this2.player = player;
                _this2.player.bind("play", onPlay);
                _this2.player.bind("pause", onPause);
                _this2.player.bind("seek", onSeek);
                _this2.player.bind("end", onEnded);
                _onReady();
              }
            });
          });
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("remove");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("time", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("volume", fraction);
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.callPlayer("playbackRate", rate);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("duration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("time");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var id = this.getID(this.props.url);
          var className = "wistia_embed wistia_async_" + id;
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react2["default"].createElement("div", { key: id, className, style });
        }
      }]);
      return Wistia2;
    }(_react.Component);
    Wistia.displayName = "Wistia";
    Wistia.canPlay = function(url) {
      return MATCH_URL.test(url);
    };
    Wistia.loopOnEnded = true;
    exports["default"] = (0, _singlePlayer2["default"])(Wistia);
  }
});

// node_modules/react-player/lib/players/Twitch.js
var require_Twitch = __commonJS({
  "node_modules/react-player/lib/players/Twitch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Twitch = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "//player.twitch.tv/js/embed/v1.js";
    var SDK_GLOBAL = "Twitch";
    var MATCH_VIDEO_URL = /(?:www\.|go\.)?twitch\.tv\/videos\/(\d+)($|\?)/;
    var MATCH_CHANNEL_URL = /(?:www\.|go\.)?twitch\.tv\/([a-z0-9_]+)($|\?)/;
    var PLAYER_ID_PREFIX = "twitch-player-";
    var Twitch = exports.Twitch = function(_Component) {
      _inherits(Twitch2, _Component);
      function Twitch2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Twitch2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Twitch2.__proto__ || Object.getPrototypeOf(Twitch2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.playerID = PLAYER_ID_PREFIX + (0, _utils.randomString)(), _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Twitch2, [{
        key: "load",
        value: function load(url, isReady) {
          var _this2 = this;
          var _props = this.props, playsinline = _props.playsinline, onError = _props.onError, config = _props.config;
          var isChannel = MATCH_CHANNEL_URL.test(url);
          var id = isChannel ? url.match(MATCH_CHANNEL_URL)[1] : url.match(MATCH_VIDEO_URL)[1];
          if (isReady) {
            if (isChannel) {
              this.player.setChannel(id);
            } else {
              this.player.setVideo("v" + id);
            }
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Twitch3) {
            _this2.player = new Twitch3.Player(_this2.playerID, _extends({
              video: isChannel ? "" : id,
              channel: isChannel ? id : "",
              height: "100%",
              width: "100%",
              playsinline,
              autoplay: _this2.props.playing
            }, config.twitch.options));
            var _Twitch$Player = Twitch3.Player, READY = _Twitch$Player.READY, PLAY = _Twitch$Player.PLAY, PAUSE = _Twitch$Player.PAUSE, ENDED = _Twitch$Player.ENDED;
            _this2.player.addEventListener(READY, _this2.props.onReady);
            _this2.player.addEventListener(PLAY, _this2.props.onPlay);
            _this2.player.addEventListener(PAUSE, _this2.props.onPause);
            _this2.player.addEventListener(ENDED, _this2.props.onEnded);
          }, onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
          this.callPlayer("pause");
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.callPlayer("getDuration");
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.callPlayer("getCurrentTime");
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var style = {
            width: "100%",
            height: "100%"
          };
          return _react2["default"].createElement("div", { style, id: this.playerID });
        }
      }]);
      return Twitch2;
    }(_react.Component);
    Twitch.displayName = "Twitch";
    Twitch.canPlay = function(url) {
      return MATCH_VIDEO_URL.test(url) || MATCH_CHANNEL_URL.test(url);
    };
    Twitch.loopOnEnded = true;
    exports["default"] = (0, _singlePlayer2["default"])(Twitch);
  }
});

// node_modules/react-player/lib/players/DailyMotion.js
var require_DailyMotion = __commonJS({
  "node_modules/react-player/lib/players/DailyMotion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.DailyMotion = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "https://api.dmcdn.net/all.js";
    var SDK_GLOBAL = "DM";
    var SDK_GLOBAL_READY = "dmAsyncInit";
    var MATCH_URL = /dailymotion\.com\/(video|hub)\/([^_]+)[^#]*(#video=([^_&]+))?/;
    var DailyMotion = exports.DailyMotion = function(_Component) {
      _inherits(DailyMotion2, _Component);
      function DailyMotion2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, DailyMotion2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = DailyMotion2.__proto__ || Object.getPrototypeOf(DailyMotion2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.onDurationChange = function() {
          var duration = _this.getDuration();
          _this.props.onDuration(duration);
        }, _this.ref = function(container) {
          _this.container = container;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(DailyMotion2, [{
        key: "parseId",
        value: function parseId(url) {
          var m = url.match(MATCH_URL);
          return m[4] || m[2];
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          var _props = this.props, controls = _props.controls, config = _props.config, onError = _props.onError, playing = _props.playing;
          var id = this.parseId(url);
          if (this.player) {
            this.player.load(id, {
              start: (0, _utils.parseStartTime)(url),
              autoplay: playing
            });
            return;
          }
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL, SDK_GLOBAL_READY, function(DM) {
            return DM.player;
          }).then(function(DM) {
            if (!_this2.container)
              return;
            var Player = DM.player;
            _this2.player = new Player(_this2.container, {
              width: "100%",
              height: "100%",
              video: id,
              params: _extends({
                controls,
                autoplay: _this2.props.playing,
                start: (0, _utils.parseStartTime)(url),
                origin: window.location.origin
              }, config.dailymotion.params),
              events: {
                apiready: _this2.props.onReady,
                seeked: function seeked() {
                  return _this2.props.onSeek(_this2.player.currentTime);
                },
                video_end: _this2.props.onEnded,
                durationchange: _this2.onDurationChange,
                pause: _this2.props.onPause,
                playing: _this2.props.onPlay,
                waiting: _this2.props.onBuffer,
                error: function error(event) {
                  return onError(event);
                }
              }
            });
          }, onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.callPlayer("setVolume", fraction);
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.player.duration || null;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return this.player.bufferedTime;
        }
      }, {
        key: "render",
        value: function render() {
          var style = _extends({
            width: "100%",
            height: "100%",
            backgroundColor: "black"
          }, this.props.style);
          return _react2["default"].createElement(
            "div",
            { style },
            _react2["default"].createElement("div", { ref: this.ref })
          );
        }
      }]);
      return DailyMotion2;
    }(_react.Component);
    DailyMotion.displayName = "DailyMotion";
    DailyMotion.canPlay = function(url) {
      return MATCH_URL.test(url);
    };
    DailyMotion.loopOnEnded = true;
    exports["default"] = (0, _singlePlayer2["default"])(DailyMotion);
  }
});

// node_modules/react-player/lib/players/Mixcloud.js
var require_Mixcloud = __commonJS({
  "node_modules/react-player/lib/players/Mixcloud.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Mixcloud = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SDK_URL = "//widget.mixcloud.com/media/js/widgetApi.js";
    var SDK_GLOBAL = "Mixcloud";
    var MATCH_URL = /mixcloud\.com\/([^/]+\/[^/]+)/;
    var Mixcloud = exports.Mixcloud = function(_Component) {
      _inherits(Mixcloud2, _Component);
      function Mixcloud2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, Mixcloud2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Mixcloud2.__proto__ || Object.getPrototypeOf(Mixcloud2)).call.apply(_ref, [this].concat(args))), _this), _this.callPlayer = _utils.callPlayer, _this.duration = null, _this.currentTime = null, _this.secondsLoaded = null, _this.ref = function(iframe) {
          _this.iframe = iframe;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(Mixcloud2, [{
        key: "load",
        value: function load(url) {
          var _this2 = this;
          (0, _utils.getSDK)(SDK_URL, SDK_GLOBAL).then(function(Mixcloud3) {
            _this2.player = Mixcloud3.PlayerWidget(_this2.iframe);
            _this2.player.ready.then(function() {
              _this2.player.events.play.on(_this2.props.onPlay);
              _this2.player.events.pause.on(_this2.props.onPause);
              _this2.player.events.ended.on(_this2.props.onEnded);
              _this2.player.events.error.on(_this2.props.error);
              _this2.player.events.progress.on(function(seconds, duration) {
                _this2.currentTime = seconds;
                _this2.duration = duration;
              });
              _this2.props.onReady();
            });
          }, this.props.onError);
        }
      }, {
        key: "play",
        value: function play() {
          this.callPlayer("play");
        }
      }, {
        key: "pause",
        value: function pause() {
          this.callPlayer("pause");
        }
      }, {
        key: "stop",
        value: function stop() {
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.callPlayer("seek", seconds);
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          return null;
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props, url = _props.url, config = _props.config;
          var id = url.match(MATCH_URL)[1];
          var style = {
            width: "100%",
            height: "100%"
          };
          var query = (0, _utils.queryString)(_extends({}, config.mixcloud.options, {
            feed: "/" + id + "/"
          }));
          return _react2["default"].createElement("iframe", {
            key: id,
            ref: this.ref,
            style,
            src: "https://www.mixcloud.com/widget/iframe/?" + query,
            frameBorder: "0"
          });
        }
      }]);
      return Mixcloud2;
    }(_react.Component);
    Mixcloud.displayName = "Mixcloud";
    Mixcloud.canPlay = function(url) {
      return MATCH_URL.test(url);
    };
    exports["default"] = (0, _singlePlayer2["default"])(Mixcloud);
  }
});

// node_modules/react-player/lib/players/FilePlayer.js
var require_FilePlayer = __commonJS({
  "node_modules/react-player/lib/players/FilePlayer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.FilePlayer = void 0;
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _utils = require_utils();
    var _singlePlayer = require_singlePlayer();
    var _singlePlayer2 = _interopRequireDefault(_singlePlayer);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var IOS = typeof navigator !== "undefined" && /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
    var AUDIO_EXTENSIONS = /\.(m4a|mp4a|mpga|mp2|mp2a|mp3|m2a|m3a|wav|weba|aac|oga|spx)($|\?)/i;
    var VIDEO_EXTENSIONS = /\.(mp4|og[gv]|webm|mov|m4v)($|\?)/i;
    var HLS_EXTENSIONS = /\.(m3u8)($|\?)/i;
    var HLS_SDK_URL = "https://cdnjs.cloudflare.com/ajax/libs/hls.js/0.8.9/hls.min.js";
    var HLS_GLOBAL = "Hls";
    var DASH_EXTENSIONS = /\.(mpd)($|\?)/i;
    var DASH_SDK_URL = "https://cdnjs.cloudflare.com/ajax/libs/dashjs/2.6.5/dash.all.min.js";
    var DASH_GLOBAL = "dashjs";
    function canPlay(url) {
      if (url instanceof Array) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = url[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var item = _step.value;
            if (typeof item === "string" && canPlay(item)) {
              return true;
            }
            if (canPlay(item.src)) {
              return true;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator["return"]) {
              _iterator["return"]();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return false;
      }
      return AUDIO_EXTENSIONS.test(url) || VIDEO_EXTENSIONS.test(url) || HLS_EXTENSIONS.test(url) || DASH_EXTENSIONS.test(url);
    }
    var FilePlayer = exports.FilePlayer = function(_Component) {
      _inherits(FilePlayer2, _Component);
      function FilePlayer2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, FilePlayer2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = FilePlayer2.__proto__ || Object.getPrototypeOf(FilePlayer2)).call.apply(_ref, [this].concat(args))), _this), _this.onSeek = function(e) {
          _this.props.onSeek(e.target.currentTime);
        }, _this.renderSource = function(source, index) {
          if (typeof source === "string") {
            return _react2["default"].createElement("source", { key: index, src: source });
          }
          return _react2["default"].createElement("source", _extends({ key: index }, source));
        }, _this.renderTrack = function(track, index) {
          return _react2["default"].createElement("track", _extends({ key: index }, track));
        }, _this.ref = function(player) {
          _this.player = player;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(FilePlayer2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          this.addListeners();
          if (IOS) {
            this.player.load();
          }
        }
      }, {
        key: "componentWillReceiveProps",
        value: function componentWillReceiveProps(nextProps) {
          if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(nextProps)) {
            this.removeListeners();
          }
        }
      }, {
        key: "componentDidUpdate",
        value: function componentDidUpdate(prevProps) {
          if (this.shouldUseAudio(this.props) !== this.shouldUseAudio(prevProps)) {
            this.addListeners();
          }
        }
      }, {
        key: "componentWillUnmount",
        value: function componentWillUnmount() {
          this.removeListeners();
        }
      }, {
        key: "addListeners",
        value: function addListeners() {
          var _props = this.props, onReady = _props.onReady, onPlay = _props.onPlay, onPause = _props.onPause, onEnded = _props.onEnded, onError = _props.onError, playsinline = _props.playsinline;
          this.player.addEventListener("canplay", onReady);
          this.player.addEventListener("play", onPlay);
          this.player.addEventListener("pause", onPause);
          this.player.addEventListener("seeked", this.onSeek);
          this.player.addEventListener("ended", onEnded);
          this.player.addEventListener("error", onError);
          if (playsinline) {
            this.player.setAttribute("playsinline", "");
            this.player.setAttribute("webkit-playsinline", "");
          }
        }
      }, {
        key: "removeListeners",
        value: function removeListeners() {
          var _props2 = this.props, onReady = _props2.onReady, onPlay = _props2.onPlay, onPause = _props2.onPause, onEnded = _props2.onEnded, onError = _props2.onError;
          this.player.removeEventListener("canplay", onReady);
          this.player.removeEventListener("play", onPlay);
          this.player.removeEventListener("pause", onPause);
          this.player.removeEventListener("seeked", this.onSeek);
          this.player.removeEventListener("ended", onEnded);
          this.player.removeEventListener("error", onError);
        }
      }, {
        key: "shouldUseAudio",
        value: function shouldUseAudio(props) {
          return AUDIO_EXTENSIONS.test(props.url) || props.config.file.forceAudio;
        }
      }, {
        key: "shouldUseHLS",
        value: function shouldUseHLS(url) {
          return HLS_EXTENSIONS.test(url) && !IOS || this.props.config.file.forceHLS;
        }
      }, {
        key: "shouldUseDASH",
        value: function shouldUseDASH(url) {
          return DASH_EXTENSIONS.test(url) || this.props.config.file.forceDASH;
        }
      }, {
        key: "load",
        value: function load(url) {
          var _this2 = this;
          if (this.shouldUseHLS(url)) {
            (0, _utils.getSDK)(HLS_SDK_URL, HLS_GLOBAL).then(function(Hls) {
              _this2.hls = new Hls(_this2.props.config.file.hlsOptions);
              _this2.hls.on(Hls.Events.ERROR, function(e, data) {
                _this2.props.onError(e, data, _this2.hls, Hls);
              });
              _this2.hls.loadSource(url);
              _this2.hls.attachMedia(_this2.player);
            });
          }
          if (this.shouldUseDASH(url)) {
            (0, _utils.getSDK)(DASH_SDK_URL, DASH_GLOBAL).then(function(dashjs) {
              _this2.dash = dashjs.MediaPlayer().create();
              _this2.dash.initialize(_this2.player, url, _this2.props.playing);
              _this2.dash.getDebug().setLogToBrowserConsole(false);
            });
          }
        }
      }, {
        key: "play",
        value: function play() {
          var promise = this.player.play();
          if (promise) {
            promise["catch"](this.props.onError);
          }
        }
      }, {
        key: "pause",
        value: function pause() {
          this.player.pause();
        }
      }, {
        key: "stop",
        value: function stop() {
          this.player.removeAttribute("src");
          if (this.hls) {
            this.hls.destroy();
          }
          if (this.dash) {
            this.dash.reset();
          }
        }
      }, {
        key: "seekTo",
        value: function seekTo(seconds) {
          this.player.currentTime = seconds;
        }
      }, {
        key: "setVolume",
        value: function setVolume(fraction) {
          this.player.volume = fraction;
        }
      }, {
        key: "setPlaybackRate",
        value: function setPlaybackRate(rate) {
          this.player.playbackRate = rate;
        }
      }, {
        key: "getDuration",
        value: function getDuration() {
          return this.player.duration;
        }
      }, {
        key: "getCurrentTime",
        value: function getCurrentTime() {
          return this.player.currentTime;
        }
      }, {
        key: "getSecondsLoaded",
        value: function getSecondsLoaded() {
          if (this.player.buffered.length === 0)
            return 0;
          return this.player.buffered.end(0);
        }
      }, {
        key: "render",
        value: function render() {
          var _props3 = this.props, url = _props3.url, loop = _props3.loop, controls = _props3.controls, config = _props3.config, width = _props3.width, height = _props3.height;
          var useAudio = this.shouldUseAudio(this.props);
          var useHLS = this.shouldUseHLS(url);
          var useDASH = this.shouldUseDASH(url);
          var Element = useAudio ? "audio" : "video";
          var src = url instanceof Array || useHLS || useDASH ? void 0 : url;
          var style = {
            width: !width || width === "auto" ? width : "100%",
            height: !height || height === "auto" ? height : "100%"
          };
          return _react2["default"].createElement(
            Element,
            _extends({
              ref: this.ref,
              src,
              style,
              preload: "auto",
              controls,
              loop
            }, config.file.attributes),
            url instanceof Array && url.map(this.renderSource),
            config.file.tracks.map(this.renderTrack)
          );
        }
      }]);
      return FilePlayer2;
    }(_react.Component);
    FilePlayer.displayName = "FilePlayer";
    FilePlayer.canPlay = canPlay;
    exports["default"] = (0, _singlePlayer2["default"])(FilePlayer);
  }
});

// node_modules/react-player/lib/players/index.js
var require_players = __commonJS({
  "node_modules/react-player/lib/players/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _YouTube = require_YouTube();
    var _SoundCloud = require_SoundCloud();
    var _Vimeo = require_Vimeo();
    var _Facebook = require_Facebook();
    var _Streamable = require_Streamable();
    var _Wistia = require_Wistia();
    var _Twitch = require_Twitch();
    var _DailyMotion = require_DailyMotion();
    var _Mixcloud = require_Mixcloud();
    var _FilePlayer = require_FilePlayer();
    exports["default"] = [_YouTube.YouTube, _SoundCloud.SoundCloud, _Vimeo.Vimeo, _Facebook.Facebook, _Streamable.Streamable, _Wistia.Wistia, _Twitch.Twitch, _DailyMotion.DailyMotion, _Mixcloud.Mixcloud, _FilePlayer.FilePlayer];
  }
});

// node_modules/react-player/lib/preload.js
var require_preload = __commonJS({
  "node_modules/react-player/lib/preload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports["default"] = renderPreloadPlayers;
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _Player = require_Player();
    var _Player2 = _interopRequireDefault(_Player);
    var _YouTube = require_YouTube();
    var _SoundCloud = require_SoundCloud();
    var _Vimeo = require_Vimeo();
    var _DailyMotion = require_DailyMotion();
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    var PRELOAD_PLAYERS = [{
      Player: _YouTube.YouTube,
      configKey: "youtube",
      url: "https://www.youtube.com/watch?v=GlCmAC4MHek"
    }, {
      Player: _SoundCloud.SoundCloud,
      configKey: "soundcloud",
      url: "https://soundcloud.com/seucheu/john-cage-433-8-bit-version"
    }, {
      Player: _Vimeo.Vimeo,
      configKey: "vimeo",
      url: "https://vimeo.com/127250231"
    }, {
      Player: _DailyMotion.DailyMotion,
      configKey: "dailymotion",
      url: "http://www.dailymotion.com/video/xqdpyk"
    }];
    function renderPreloadPlayers(url, config) {
      var players = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = void 0;
      try {
        for (var _iterator = PRELOAD_PLAYERS[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var player = _step.value;
          if (!player.Player.canPlay(url) && config[player.configKey].preload) {
            players.push(_react2["default"].createElement(_Player2["default"], {
              key: player.Player.displayName,
              activePlayer: player.Player,
              url: player.url,
              playing: true,
              style: { display: "none" }
            }));
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"]) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
      return players;
    }
  }
});

// node_modules/react-player/lib/ReactPlayer.js
var require_ReactPlayer = __commonJS({
  "node_modules/react-player/lib/ReactPlayer.js"(exports) {
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    var _extends = Object.assign || function(target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _react = require_react();
    var _react2 = _interopRequireDefault(_react);
    var _props2 = require_props();
    var _utils = require_utils();
    var _players = require_players();
    var _players2 = _interopRequireDefault(_players);
    var _Player3 = require_Player();
    var _Player4 = _interopRequireDefault(_Player3);
    var _FilePlayer = require_FilePlayer();
    var _preload = require_preload();
    var _preload2 = _interopRequireDefault(_preload);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { "default": obj };
    }
    function _toConsumableArray(arr) {
      if (Array.isArray(arr)) {
        for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
          arr2[i] = arr[i];
        }
        return arr2;
      } else {
        return Array.from(arr);
      }
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _possibleConstructorReturn(self, call) {
      if (!self) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });
      if (superClass)
        Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
    }
    var SUPPORTED_PROPS = Object.keys(_props2.propTypes);
    var ReactPlayer = function(_Component) {
      _inherits(ReactPlayer2, _Component);
      function ReactPlayer2() {
        var _ref;
        var _temp, _this, _ret;
        _classCallCheck(this, ReactPlayer2);
        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }
        return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ReactPlayer2.__proto__ || Object.getPrototypeOf(ReactPlayer2)).call.apply(_ref, [this].concat(args))), _this), _this.config = (0, _utils.getConfig)(_this.props, _props2.defaultProps, true), _this.getDuration = function() {
          if (!_this.player)
            return null;
          return _this.player.getDuration();
        }, _this.getCurrentTime = function() {
          if (!_this.player)
            return null;
          return _this.player.getCurrentTime();
        }, _this.getInternalPlayer = function() {
          var key = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : "player";
          if (!_this.player)
            return null;
          return _this.player.getInternalPlayer(key);
        }, _this.seekTo = function(fraction) {
          if (!_this.player)
            return null;
          _this.player.seekTo(fraction);
        }, _this.wrapperRef = function(wrapper) {
          _this.wrapper = wrapper;
        }, _this.activePlayerRef = function(player) {
          _this.player = player;
        }, _temp), _possibleConstructorReturn(_this, _ret);
      }
      _createClass(ReactPlayer2, [{
        key: "componentDidMount",
        value: function componentDidMount() {
          if (this.props.progressFrequency) {
            var message = "ReactPlayer: %cprogressFrequency%c is deprecated, please use %cprogressInterval%c instead";
            console.warn(message, "font-weight: bold", "", "font-weight: bold", "");
          }
        }
      }, {
        key: "shouldComponentUpdate",
        value: function shouldComponentUpdate(nextProps) {
          return !(0, _utils.isEqual)(this.props, nextProps);
        }
      }, {
        key: "componentWillUpdate",
        value: function componentWillUpdate(nextProps) {
          this.config = (0, _utils.getConfig)(nextProps, _props2.defaultProps);
        }
      }, {
        key: "getActivePlayer",
        value: function getActivePlayer(url) {
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = void 0;
          try {
            for (var _iterator = _players2["default"][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var _Player = _step.value;
              if (_Player.canPlay(url)) {
                return _Player;
              }
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator["return"]) {
                _iterator["return"]();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
          return _FilePlayer.FilePlayer;
        }
      }, {
        key: "renderActivePlayer",
        value: function renderActivePlayer(url) {
          if (!url)
            return null;
          var activePlayer = this.getActivePlayer(url);
          return _react2["default"].createElement(_Player4["default"], _extends({}, this.props, {
            key: activePlayer.displayName,
            ref: this.activePlayerRef,
            config: this.config,
            activePlayer
          }));
        }
      }, {
        key: "sortPlayers",
        value: function sortPlayers(a, b) {
          if (a && b) {
            return a.key < b.key ? -1 : 1;
          }
          return 0;
        }
      }, {
        key: "render",
        value: function render() {
          var _props = this.props, url = _props.url, style = _props.style, width = _props.width, height = _props.height, Wrapper = _props.wrapper;
          var otherProps = (0, _utils.omit)(this.props, SUPPORTED_PROPS, _props2.DEPRECATED_CONFIG_PROPS);
          var activePlayer = this.renderActivePlayer(url);
          var preloadPlayers = (0, _preload2["default"])(url, this.config);
          var players = [activePlayer].concat(_toConsumableArray(preloadPlayers)).sort(this.sortPlayers);
          return _react2["default"].createElement(
            Wrapper,
            _extends({ ref: this.wrapperRef, style: _extends({}, style, { width, height }) }, otherProps),
            players
          );
        }
      }]);
      return ReactPlayer2;
    }(_react.Component);
    ReactPlayer.displayName = "ReactPlayer";
    ReactPlayer.propTypes = _props2.propTypes;
    ReactPlayer.defaultProps = _props2.defaultProps;
    ReactPlayer.canPlay = function(url) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = void 0;
      try {
        for (var _iterator2 = _players2["default"][Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _Player2 = _step2.value;
          if (_Player2.canPlay(url)) {
            return true;
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2["return"]) {
            _iterator2["return"]();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
      return false;
    };
    exports["default"] = ReactPlayer;
  }
});
export default require_ReactPlayer();
//# sourceMappingURL=react-player.js.map
